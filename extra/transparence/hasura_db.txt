CREATE FUNCTION public.set_current_timestamp_updated_at() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  _new record;
BEGIN
  _new := NEW;
  _new."updated_at" = NOW();
  RETURN _new;
END;
$$;
CREATE TABLE public.albums (
    id uuid DEFAULT public.gen_random_uuid() NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    name text NOT NULL
);
CREATE TABLE public.artists (
    id uuid DEFAULT public.gen_random_uuid() NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    name text NOT NULL
);
CREATE TABLE public.contributions (
    id uuid DEFAULT public.gen_random_uuid() NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    party_uuid uuid,
    rightsholder_percent numeric,
    backing_vocals boolean,
    musician boolean,
    role text,
    instrument text,
    track_uuid uuid
);
CREATE TABLE public.labels (
    id uuid DEFAULT public.gen_random_uuid() NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    name text NOT NULL
);
CREATE TABLE public.licensors (
    id uuid DEFAULT public.gen_random_uuid() NOT NULL,
    name text NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);
CREATE TABLE public.parties (
    id uuid DEFAULT public.gen_random_uuid() NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    first_name text NOT NULL,
    last_name text NOT NULL
);
CREATE TABLE public.tracks (
    id uuid DEFAULT public.gen_random_uuid() NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    licensor_uuid uuid,
    track_title text,
    album_uuid uuid,
    isrc text,
    upc text,
    duration integer,
    initial_release_date date,
    track_artist_uuid uuid,
    distributing_label_uuid uuid,
    release_country text
);
CREATE TABLE public.users (
    id text NOT NULL,
    name text NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    last_seen timestamp with time zone
);
ALTER TABLE ONLY public.albums
    ADD CONSTRAINT albums_pkey PRIMARY KEY (id);
ALTER TABLE ONLY public.artists
    ADD CONSTRAINT artists_pkey PRIMARY KEY (id);
ALTER TABLE ONLY public.parties
    ADD CONSTRAINT contacts_pkey PRIMARY KEY (id);
ALTER TABLE ONLY public.contributions
    ADD CONSTRAINT contributions_pkey PRIMARY KEY (id);
ALTER TABLE ONLY public.labels
    ADD CONSTRAINT label_pkey PRIMARY KEY (id);
ALTER TABLE ONLY public.licensors
    ADD CONSTRAINT licensors_pkey PRIMARY KEY (id);
ALTER TABLE ONLY public.tracks
    ADD CONSTRAINT tracks_pkey PRIMARY KEY (id);
ALTER TABLE ONLY public.users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);
CREATE TRIGGER set_public_albums_updated_at BEFORE UPDATE ON public.albums FOR EACH ROW EXECUTE FUNCTION public.set_current_timestamp_updated_at();
COMMENT ON TRIGGER set_public_albums_updated_at ON public.albums IS 'trigger to set value of column "updated_at" to current timestamp on row update';
CREATE TRIGGER set_public_artists_updated_at BEFORE UPDATE ON public.artists FOR EACH ROW EXECUTE FUNCTION public.set_current_timestamp_updated_at();
COMMENT ON TRIGGER set_public_artists_updated_at ON public.artists IS 'trigger to set value of column "updated_at" to current timestamp on row update';
CREATE TRIGGER set_public_contacts_updated_at BEFORE UPDATE ON public.parties FOR EACH ROW EXECUTE FUNCTION public.set_current_timestamp_updated_at();
COMMENT ON TRIGGER set_public_contacts_updated_at ON public.parties IS 'trigger to set value of column "updated_at" to current timestamp on row update';
CREATE TRIGGER set_public_contributions_updated_at BEFORE UPDATE ON public.contributions FOR EACH ROW EXECUTE FUNCTION public.set_current_timestamp_updated_at();
COMMENT ON TRIGGER set_public_contributions_updated_at ON public.contributions IS 'trigger to set value of column "updated_at" to current timestamp on row update';
CREATE TRIGGER set_public_label_updated_at BEFORE UPDATE ON public.labels FOR EACH ROW EXECUTE FUNCTION public.set_current_timestamp_updated_at();
COMMENT ON TRIGGER set_public_label_updated_at ON public.labels IS 'trigger to set value of column "updated_at" to current timestamp on row update';
CREATE TRIGGER set_public_licensors_updated_at BEFORE UPDATE ON public.licensors FOR EACH ROW EXECUTE FUNCTION public.set_current_timestamp_updated_at();
COMMENT ON TRIGGER set_public_licensors_updated_at ON public.licensors IS 'trigger to set value of column "updated_at" to current timestamp on row update';
CREATE TRIGGER set_public_tracks_updated_at BEFORE UPDATE ON public.tracks FOR EACH ROW EXECUTE FUNCTION public.set_current_timestamp_updated_at();
COMMENT ON TRIGGER set_public_tracks_updated_at ON public.tracks IS 'trigger to set value of column "updated_at" to current timestamp on row update';
CREATE TRIGGER set_public_users_updated_at BEFORE UPDATE ON public.users FOR EACH ROW EXECUTE FUNCTION public.set_current_timestamp_updated_at();
COMMENT ON TRIGGER set_public_users_updated_at ON public.users IS 'trigger to set value of column "updated_at" to current timestamp on row update';
ALTER TABLE ONLY public.contributions
    ADD CONSTRAINT contributions_party_uuid_fkey FOREIGN KEY (party_uuid) REFERENCES public.parties(id) ON UPDATE SET NULL ON DELETE SET NULL;
ALTER TABLE ONLY public.contributions
    ADD CONSTRAINT contributions_track_uuid_fkey FOREIGN KEY (track_uuid) REFERENCES public.tracks(id) ON UPDATE SET NULL ON DELETE SET NULL;
ALTER TABLE ONLY public.tracks
    ADD CONSTRAINT tracks_album_uuid_fkey FOREIGN KEY (album_uuid) REFERENCES public.albums(id) ON UPDATE SET NULL ON DELETE SET NULL;
ALTER TABLE ONLY public.tracks
    ADD CONSTRAINT tracks_distributing_label_uuid_fkey FOREIGN KEY (distributing_label_uuid) REFERENCES public.labels(id) ON UPDATE SET NULL ON DELETE SET NULL;
ALTER TABLE ONLY public.tracks
    ADD CONSTRAINT tracks_licensor_uuid_fkey FOREIGN KEY (licensor_uuid) REFERENCES public.licensors(id) ON UPDATE SET NULL ON DELETE SET NULL;
ALTER TABLE ONLY public.tracks
    ADD CONSTRAINT tracks_track_artist_uuid_fkey FOREIGN KEY (track_artist_uuid) REFERENCES public.artists(id) ON UPDATE SET NULL ON DELETE SET NULL;
